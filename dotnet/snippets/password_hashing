using System.Security.Cryptography;
using Microsoft.AspNetCore.Cryptography.KeyDerivation;

        /**
         * <summary>
         * generates a password hash
         * </summary>
         */
        public static string EncryptPassword(string password, byte[] salt = null)
        {
            if (salt == null)
            {
                salt = GenerateSalt(128);
            }
            byte[] hashedPassBytes = KeyDerivation.Pbkdf2(
                salt: salt, password: password,
                prf: KeyDerivationPrf.HMACSHA256, numBytesRequested: 256 / 8,
                iterationCount: 10000);
            string passwordHashStr = Convert.ToBase64String(hashedPassBytes);
            string saltStr = Convert.ToBase64String(salt);
            return $"{saltStr}:{passwordHashStr}";
        }

        /**
         * <summary>
         * authenticates a password
         * </summary>
         *
         * <returns>
         * true if the password is correct.
         * false if the password is incorrect.
         * </returns>
         */
        public static bool VerifyPassword(string password, string hash)
        {
            string[] saltAndHash = hash.Split(':');
            if (saltAndHash.Length != 2)
                return false;
            string salt = saltAndHash[0];
            if (salt == null)
                return false;
            byte[] saltBytes = Convert.FromBase64String(salt);
            string calculatedHash = EncryptPassword(password, saltBytes);
            return (String.Compare(hash, calculatedHash) == 0);
        }

        /**
         * <summary>
         * generates a random salt in form of a byte array
         * </summary>
         *
         * <returns>
         * an array of randomly generated bytes
         * </returns>
         */
        private static byte[] GenerateSalt(int numBits)
        {
            byte[] newSalt = new byte[numBits / 8];
            // fill up salt array with random bytes
            using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(newSalt);
                return newSalt;
            }
        }
