- oauth => framework / standard that gives websites or web applications limited access to users' information located in other applications without needing authentication credentials such as passwords
- parties => client application, user, oauth provider
- grant type dicates the flow that will be used when a client application is using an oauth service

-- grant types --
- authorization code grant type(back channel communication)
- implicit grant type(user's browser communication)


- authorization code -> sent to client application for it to be granted an access token by the oauth service for secure back channel communication

-- oauth request example --
https://oauth-provider.net/auth?client_id=vaglv0mepz3hmaohpjpzv&redirect_uri=https://client-application.net/oauth-login&response_type=code&scope=openid%20profile%20email
- client_id = unique id of client application(provided when client application registers with oauth provider)
- response_type = the type of data returned from the endpoint used(in our case, /auth is the endpoint)
- scope = the data to be accessed and what operations the client application will perform on it

-- more --
- openid -> used in conjunction with oauth to add some more features related
to authenticating and identifying users. It is built on top of oauth and was
made specifically for authentication. OAuth was not intended for authentication when it was created.
- for openID:
		- relying party aka 'client application' in oauth
		- end user aka 'resource owner'
		- openID provider aka 'oauth provider'
- openid more info:
-> claims: key, value pairs that represent user information on the server
-> scopes(similar to all identity providers, unlike in oauth where the
scopes are different for each provider)examples of standard scopes: email, address, phone, profile
