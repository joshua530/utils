Array.forEach(function(current)) -> executes function for each element in the array. Does not return anything
Array.filter(function(current) => bool)
    -> filters items and returns array of items that make the function return true
Array.map(function(current)=>any)
    -> applies function to each element and returns array of values that have been returned by the function
Array.sort(function(a,b)=>{1,>1,<1})
    -> by default(without comparative function), it sorts the items as strings
    -> if function is given, the items are compared two at a time(1=equal, <1=a is less than b, >1=a is greater than b)
Array.reduce(function(total,current))
    -> 'reduces' an array to a single value(eg get the total of all items in a numbers array)

Promise.resolve
Promise.reject
Promise.all
Promise.then(onFulfilled, onRejected)
Promise.catch
new Promise((resolve,reject)=>{})

async function asyncFuncName(...args){}
await asyncFuncName()

fetch() returns a promise

for (let x of iterable) -> iterates over items in iterable
for (let x in iterable) -> iterates over indices of iterable

async -> makes a function return a promise
await -> makes a function wait for a promise
      -> await can only be used in a function declared using async ie async func(args) {}

import 'module' / import('module')
    -> just runs module's code for it's side effects without actually bringing in any values from the module

Function constructor receives the code that the function is supposed to run
eg
Function('console.log(1);return 0;') == 
function() {console.log(1);return 0;}
To access the function object, access <function>.constructor where <function> is any function object
The .constructor of a function will be the function associated with the internal prototype of that function
